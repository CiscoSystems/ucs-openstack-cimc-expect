#!/usr/bin/expect -f
#
# This Expect script was generated by autoexpect on Thu Mar 28 19:06:27 2013
# Expect and autoexpect were both written by Don Libes, NIST.
#
# Note that autoexpect does not guarantee a working script.  It
# necessarily has to guess about certain things.  Two reasons a script
# might fail are:
#
# 1) timing - A surprising number of programs (rn, ksh, zsh, telnet,
# etc.) and devices discard or ignore keystrokes that arrive "too
# quickly" after prompts.  If you find your new script hanging up at
# one spot, try adding a short sleep just before the previous send.
# Setting "force_conservative" to 1 (see below) makes Expect do this
# automatically - pausing briefly before sending each character.  This
# pacifies every program I know of.  The -c flag makes the script do
# this in the first place.  The -C flag allows you to define a
# character to toggle this mode off and on.

set force_conservative 0  ;# set to 1 to force conservative mode even if
  		  ;# script wasn't run conservatively originally
if {$force_conservative} {
	set send_slow {1 .1}
	proc send {ignore arg} {
		sleep .1
		exp_send -s -- $arg
	}
}

#
# 2) differing output - Some programs produce different output each time
# they run.  The "date" command is an obvious example.  Another is
# ftp, if it produces throughput statistics at the end of a file
# transfer.  If this causes a problem, delete these patterns or replace
# them with wildcards.  An alternative is to use the -p flag (for
# "prompt") which makes Expect only look for the last line of output
# (i.e., the prompt).  The -P flag allows you to define a character to
# toggle this mode off and on.
#
# Read the man page for more info.
#
# -Don

set cimc_addr [lindex $argv 0]
#set user [lindex $argv 1]
#set password [lindex $argv 2]
set user "admin"
set password "password"

set timeout 60
spawn $env(SHELL)
match_max 100000
expect "# "
send -- "ssh $user@$cimc_addr\r"
expect "(yes/no)? " {
  send "yes\r"
  expect "word: "
  send "$password\r"
} \
"word: " {
  send "$password\r"
}


expect "# "
send -- "top\r"
expect "# "
send -- "scope chassis\r"
expect "# "
send -- "scope storageadapter SLOT-MEZZ\r"
expect "# "
send "scope virtual-drive 0\r"
expect "# "
send "delete-virtual-drive\r"
expect "> " {
  send "yes\r"
  expect "# "
  sleep 30
  send "exit\r"
} \
"# " {
  send "\r"
}
expect "# "
send -- "create-virtual-drive\r"
  expect "> "
send -- "5\r"
  expect "> "
send -- "1,2,3,4,5\r"
  expect "> "
send -- "RAID5_12345\r"
  expect "> "
send -- "1903532 MB\r"
  expect "> "
send -- "y\r"
  expect "> "
send -- "y\r"
expect "# "
sleep 30
send -- "scope virtual-drive 0\r"
expect "# "
send -- "set-boot-drive\r"
  expect "> "
send -- "yes\r"

expect "# "
send -- "top\r"
expect "# "
send -- "scope chassis/adapter 1\r"
expect "# "
send -- "scope host-eth-if eth0\r"
expect "# "
send -- "set boot enabled\r"
expect "# "
send -- "commit\r"
expect "# "
send -- "exit\r"
expect "# "
send -- "top\r"
expect "# "
send -- "scope chassis\r"
expect "# "
send -- "power off\r"
expect "]"
send -- "y\r"
expect "# "

send -- "top\r"
expect "# "
send -- "scope bios\r"
expect "# "
send -- "clear-cmos\r"
expect "]"
send -- "y\r"
expect "# "
send -- "bios-setup-default\r"
expect "]"
send -- "y\r"
expect "# "
send -- "scope advanced\r"
expect "# "
send -- "set LomOpromControlPort0 Disabled\r"
expect "# "
send -- "set LomOpromControlPort1 Disabled\r"
expect "# "
send -- "set UsbPortInt Disabled\r"
expect "# "
send -- "set UsbPortSdCard Disabled\r"
expect "# "
send -- "commit\r"
expect "]"
send -- "y\r"
expect "# "
send -- "exit\r"
expect "# "
send -- "set boot-order cdrom,pxe,hdd\r"
expect "# "
send -- "commit\r"
expect "# "
send -- "top\r"
expect "# "
send -- "scope chassis\r"
expect "# "
send -- "power hard-reset\r"
expect "]"
send -- "y\r"
expect "# "
send -- "exit\r"
expect "# "
send -- "exit\r"
expect "# "
send -- "exit\r"
expect eof
